<!DOCTYPE html>
<html>
<head>
<link href="https://fonts.googleapis.com/css?family=Dancing+Script&display=swap" rel="stylesheet">
<link rel='stylesheet' href='style.css'>
<script src='music.js'></script>
<script src='harmonicGenerator.js'></script>
<!-- <script src='shift.js'></script> -->
</head>
    <body>
    <div id="main-container">

    <div id="leftColumn">

        <p class='leftControls'>
            <label>standard pitch:</label>
                <input type='number' id='stdPitch' value='396'>
        </p>
        <p class='leftControls'>
            <label>selected ratio</label>
                <span id='dragonDrop'>&nbsp;</span>
        </p>
        <p class='leftControls'>
            <label>range: </label>
                <input type='number' id='range' value='200'>
        </p>
        <p class='leftControls'>
<button id='ascendingButton' onclick='ascendingGenerator()'>Ascending</button>
<button id='descendingButton' onclick='descendingGenerator()'>Descending</button>
        </p>
        <p class='leftControls'>
            <label>Volume: </label>
<input id='sampleVolume' type='range' min='0' max='10' step='.1' value='2'>
        </p>

       <section id='stairsInside'></section>    

    </div>

  <div id='interface'>
    <% for (let i = 0; i < 40; i++) { %>
      <section class='tiles' data-index='<%=i%>'>
          <article class='keyNames'>&nbsp;</article>
          <article class='fractions'>&nbsp;</article>
          <article class='decimals'>&nbsp;</article>
          <article class='values'>&nbsp;</article>
      </section>
      <% } %>
  </div>  

    <div id="footer">
        
            <section class='effects'>

                <div id='volumeBox'>
                    volume :<br/>
                    <input value='2' id='volume' type='range' min='0' max='10' step='1'>
                </div>

                <div id='waveBox'>
                    wave type:<br/>
                    <select id='wave'>
                            <option value="sine">sine</option>
                            <option value="square">square</option>
                            <option value="triangle">triangle</option>
                            <option value="sawtooth">sawtooth</option>
                    </select>
                </div>
            </section>

            <section class='effects'>
                <label>Biquad Filter: </label>
                 <select id='biquadFilter'>
                        <option value="lowpass">lowpass</option>
                        <option value="highpass">highpass</option>
                        <option value="bandpass">bandpass</option>
                        <option value="lowshelf">lowshelf</option>
                        <option value="highshelf">highshelf</option>
                        <option value="peaking">peaking</option>
                        <option value="notch">notch</option>
                        <option value="allpass">allpass</option>
                </select>

        <p class='biquadLabel' id='biquadFrequencyContainer'>  
            freq.  <input type='number' id='biquadFrequency' value='528'>
        </p>
        <p class='biquadLabel' id='biquadQualityContainer'>  
            quality  <input type='number' id='biquadQuality' value='10'>
        </p>
		<p class='biquadLabel' id='biquadGainContainer' hidden>
		  gain <input type='range' id='biquadGain' value='10' min='-40' max='40' step='1'>
		</p>

            </section>


            <section class='effects'>
                <label>Compressor</label>
<span class='compressorBoxes'>attack:<input class='compressors' id='compressorAttack' type='range' min='0' max='1' step='.1' value='.1'></span>
<span class='compressorBoxes'>knee:<input class='compressors' id='compressorKnee' type='range' min='0' max='40' step='1' value='30'></span>
<span class='compressorBoxes'>ratio:<input class='compressors' id='compressorRatio' type='range' min='1' max='20' step='1' value='12'></span>
<span class='compressorBoxes'>release:<input class='compressors' id='compressorRelease' type='range' min='0' max='1' step='.05' value='.25'></span>
<span class='compressorBoxes'>threshold:<input class='compressors' id='compressorThreshold' type='range' min='-100' max='0' step='1' value='-24'></span>
            </section>
    </div>
</div>

</body>
<script>
const theDelay = document.getElementById('theDelay');
const maxDelay = document.getElementById('maxDelay');

const compressorAttack = document.getElementById('compressorAttack');
const compressorKnee = document.getElementById('compressorKnee');
const compressorRatio = document.getElementById('compressorRatio');
const compressorRelease = document.getElementById('compressorRelease');
const compressorThreshold = document.getElementById('compressorThreshold');

const sampleVolume = document.getElementById('sampleVolume');
const keyNames = document.getElementsByClassName('keyNames');
const decimals = document.getElementsByClassName('decimals');
const fractions = document.getElementsByClassName('fractions');
const values = document.getElementsByClassName('values');
const stdPitch = document.getElementById('stdPitch');
const volume = document.getElementById('volume');

const tiles = document.getElementsByClassName('tiles');

const leftStartAt = document.getElementById('leftStartAt');

const biquadFilter = document.getElementById('biquadFilter');
const biquadFrequency = document.getElementById('biquadFrequency');
const biquadQuality = document.getElementById('biquadQuality');
const biquadGain = document.getElementById('biquadGain');

let atx;

window.addEventListener('click', () => {
	atx = new AudioContext();
})

document.addEventListener('DOMContentLoaded', () => {
    for (let i = 0; i < keyCodes.length; i++) {
	    keyNames[i].innerText = keyCodes[i].symb
    }
});

const stairsInside = document.getElementById('stairsInside');
const range = document.getElementById('range');
const harmonics = document.getElementsByClassName('harmonics');
const dragonDrop = document.getElementById('dragonDrop');
const interface = document.getElementById('interface');



stairsInside.onclick = e => dragonDrop.innerText = e.target.textContent;



interface.onclick = e => {
   let dataIndex = parseInt(e.target.parentNode.getAttribute('data-index'));
   
    if (e.srcElement.localName === 'article') {
    fractions[dataIndex].innerText = dragonDrop.textContent;
    decimals[dataIndex].innerText = eval(dragonDrop.textContent).toPrecision(5).replace(/0+$/, '');
	values[dataIndex].innerText = stdPitch.value* eval(dragonDrop.textContent).toPrecision(5);
    } 
}
const startAt = document.getElementById('startAt');
stdPitch.addEventListener('change', () => {
    for (let i = 0; i < fractions.length; i++) {
        if (typeof eval(fractions[i].textContent) == 'number') {
            values[i].innerText = (stdPitch.value * eval(fractions[i].textContent)).toPrecision(6)
        }

    }
});

stairsInside.addEventListener('mouseover', e => {
    notes[40].sampleOn(e.target.textContent)
})
stairsInside.addEventListener('mouseout', () => {
    notes[40].sampleOff()
})

const ascendingButton = document.getElementById('ascendingButton')
const descendingButton = document.getElementById('descendingButton')

const biquadFrequencyContainer = document.getElementById('biquadFrequencyContainer');
const biquadQualityContainer = document.getElementById('biquadQualityContainer');
const biquadGainContainer = document.getElementById('biquadGainContainer');

biquadFilter.addEventListener('change', () => {
	switch (biquadFilter.value) {
		case 'lowpass':
			biquadFrequencyContainer.hidden = false;
			biquadQualityContainer.hidden = false;
			biquadGainContainer.hidden = true;
		break;
		case 'highpass':
			biquadFrequencyContainer.hidden = false;
			biquadQualityContainer.hidden = false;
			biquadGainContainer.hidden = true;

		break;
		case 'bandpass':
			biquadFrequencyContainer.hidden = false;
			biquadQualityContainer.hidden = false;
			biquadGainContainer.hidden = true;

		break;
		case 'lowshelf':
			biquadFrequencyContainer.hidden = false;
			biquadQualityContainer.hidden = true;
			biquadGainContainer.hidden = false;

		break;
		case 'highshelf':
			biquadFrequencyContainer.hidden = false;
			biquadQualityContainer.hidden = true;
			biquadGainContainer.hidden = false;
		break;
		case 'peaking':
			biquadFrequencyContainer.hidden = false;
			biquadQualityContainer.hidden = false;
			biquadGainContainer.hidden = false;
		break;
		case 'notch':
			biquadFrequencyContainer.hidden = false;
			biquadQualityContainer.hidden = false;
			biquadGainContainer.hidden = true;
		break;
		case 'allpass':
			biquadFrequencyContainer.hidden = false;
			biquadQualityContainer.hidden = false;
			biquadGainContainer.hidden = true;
		break;


	}	
})


</script>
</html>
